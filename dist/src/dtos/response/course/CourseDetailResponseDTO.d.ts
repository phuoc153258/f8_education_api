import { Types } from "mongoose";
export interface ICourseDetailResponseDTO {
    _id?: Types.ObjectId;
    title?: String;
    description?: String;
    slug?: String;
    image?: String;
    icon?: String;
    studentCount?: Number;
    createdAt?: Date;
    updatedAt?: Date;
    isDeleted?: Boolean;
    deletedAt?: Date;
    isPublished?: Boolean;
    publishedAt?: Date;
    levelId?: Types.ObjectId;
    tracks?: any;
    isRegister?: Boolean;
    willLearns?: Array<any>;
    requirements?: Array<any>;
    level?: any;
}
export default class CourseDetailResponseDTO {
    _id?: Types.ObjectId;
    _title?: String;
    _description?: String;
    _slug?: String;
    _image?: String;
    _icon?: String;
    _studentCount?: Number;
    _createdAt?: Date;
    _updatedAt?: Date;
    _isDeleted?: Boolean;
    _deletedAt?: Date;
    _isPublished?: Boolean;
    _publishedAt?: Date;
    _levelId?: Types.ObjectId;
    _tracks?: any;
    _isRegister?: Boolean;
    _willLearns?: Array<any>;
    _requirements?: Array<any>;
    _level?: any;
    get id(): Types.ObjectId;
    setId(id: Types.ObjectId): this;
    get title(): any;
    setTitle(title: any): this;
    get description(): String;
    setDescription(description: any): this;
    get slug(): String;
    setSlug(slug: any): this;
    get image(): String;
    setImage(image: any): this;
    get icon(): String;
    setIcon(icon: any): this;
    get studentCount(): Number;
    setStudentCount(studentCount: any): this;
    get createdAt(): Date;
    setCreatedAt(createdAt: any): this;
    get updatedAt(): Date;
    setUpdatedAt(updatedAt: any): this;
    get isDeleted(): Boolean;
    setIsDeleted(isDeleted: any): this;
    get deletedAt(): Date;
    setDeletedAt(deletedAt: any): this;
    get publishedAt(): Date;
    setPublishedAt(publishedAt: any): this;
    get isPublished(): Boolean;
    setIsPublished(isPublished: any): this;
    get levelId(): Types.ObjectId;
    setLevelId(levelId: any): this;
    get level(): any;
    setLevel(level: any): this;
    get tracks(): any;
    setTracks(tracks: any): this;
    get willLearns(): any;
    setWillLearns(willLearns: any): this;
    get requirements(): any;
    setRequirements(requirements: any): this;
    get isRegister(): Boolean;
    setIsRegister(id: any, user_course: any): this;
    get(): ICourseDetailResponseDTO;
    responseDTO(model: any, user_course: any, willLearns: any, requirements: any, level: any): ICourseDetailResponseDTO;
}
